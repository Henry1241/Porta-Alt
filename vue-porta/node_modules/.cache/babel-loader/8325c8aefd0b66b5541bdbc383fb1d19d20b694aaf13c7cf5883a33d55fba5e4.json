{"ast":null,"code":"import { createWebHistory, createRouter } from 'vue-router';\nimport { getAuth, onAuthStateChanged } from \"firebase/auth\";\nimport LoginView from './views/LoginView.vue';\n// import HomeView from './views/HomeView.vue'\nimport RegisterView from './views/RegisterView.vue';\nimport ResetView from './views/ResetView.vue';\n// import ProprietyView from './views/ProprietyView'\n// import ProprietyCreateFormView from './views/Propriety/ProprietyCreateFormView'\n// import ContructionPageView from './views/ContructionPageView'\n// import ProprietyInfoView from './views/ProprietyInfoView.vue'\n\nconst routes = [{\n  path: '/login',\n  component: LoginView\n},\n// {\n//   path: '/home',\n//   component: HomeView\n// },\n{\n  path: '/register',\n  component: RegisterView\n}, {\n  path: '/reset',\n  component: ResetView\n}\n// {\n//   path: '/propriety',\n//   component: ProprietyView\n// },\n// {\n//   path: '/propriety/create',\n//   component: ProprietyCreateFormView\n// },\n// {\n//   path: '/contruction',\n//   component: ContructionPageView\n// },\n// {\n//   path: '/propriety/:id', // Usamos :id para indicar que este segmento de la URL es dinámico y puede ser cualquier ID de propiedad\n//   component: ProprietyInfoView, // Componente asociado a esta ruta\n//   props: true // Esto permite pasar props a la vista\n// },\n];\nconst router = createRouter({\n  history: createWebHistory(),\n  routes: routes\n});\nconst getCurrentUser = () => {\n  return new Promise((resolve, reject) => {\n    const removeListener = onAuthStateChanged(getAuth(), user => {\n      removeListener();\n      resolve(user);\n    }, reject);\n  });\n};\nrouter.beforeEach(async (to, from, next) => {\n  if (to.matched.some(record => record.meta.requiresAuth)) {\n    if (await getCurrentUser()) {\n      next();\n    } else {\n      alert(\"Usted no tiene acceso\");\n      next(\"/\");\n    }\n  } else {\n    next();\n  }\n});\nexport default router;","map":{"version":3,"names":["createWebHistory","createRouter","getAuth","onAuthStateChanged","LoginView","RegisterView","ResetView","routes","path","component","router","history","getCurrentUser","Promise","resolve","reject","removeListener","user","beforeEach","to","from","next","matched","some","record","meta","requiresAuth","alert"],"sources":["C:/Users/carlo/Documents/python/Porta-Alt/vue-porta/src/router.js"],"sourcesContent":["import { createWebHistory, createRouter } from 'vue-router'\r\nimport { getAuth, onAuthStateChanged } from \"firebase/auth\";\r\nimport LoginView from './views/LoginView.vue'\r\n// import HomeView from './views/HomeView.vue'\r\nimport RegisterView from './views/RegisterView.vue'\r\nimport ResetView from './views/ResetView.vue'\r\n// import ProprietyView from './views/ProprietyView'\r\n// import ProprietyCreateFormView from './views/Propriety/ProprietyCreateFormView'\r\n// import ContructionPageView from './views/ContructionPageView'\r\n// import ProprietyInfoView from './views/ProprietyInfoView.vue'\r\n\r\n\r\nconst routes = [\r\n  {\r\n    path: '/login',\r\n    component: LoginView\r\n  },\r\n  // {\r\n  //   path: '/home',\r\n  //   component: HomeView\r\n  // },\r\n  {\r\n    path: '/register',\r\n    component: RegisterView\r\n  },\r\n  {\r\n    path: '/reset',\r\n    component: ResetView\r\n  },\r\n  // {\r\n  //   path: '/propriety',\r\n  //   component: ProprietyView\r\n  // },\r\n  // {\r\n  //   path: '/propriety/create',\r\n  //   component: ProprietyCreateFormView\r\n  // },\r\n  // {\r\n  //   path: '/contruction',\r\n  //   component: ContructionPageView\r\n  // },\r\n  // {\r\n  //   path: '/propriety/:id', // Usamos :id para indicar que este segmento de la URL es dinámico y puede ser cualquier ID de propiedad\r\n  //   component: ProprietyInfoView, // Componente asociado a esta ruta\r\n  //   props: true // Esto permite pasar props a la vista\r\n  // },\r\n  \r\n  \r\n];\r\n\r\nconst router = createRouter({\r\n  history: createWebHistory(),\r\n  routes: routes,\r\n});\r\n\r\nconst getCurrentUser = () => {\r\n  return new Promise((resolve, reject) => {\r\n    const removeListener = onAuthStateChanged(\r\n      getAuth(),\r\n      (user) => {\r\n        removeListener();\r\n        resolve(user);\r\n      },\r\n      reject\r\n    );\r\n  });\r\n};\r\n\r\nrouter.beforeEach(async(to, from, next) =>{\r\n  if (to.matched.some((record) => record.meta.requiresAuth)) {\r\n    if (await getCurrentUser()) {\r\n       next();\r\n    }else{\r\n      alert(\"Usted no tiene acceso\");\r\n      next(\"/\")\r\n    }\r\n  } else {\r\n    next();\r\n  }\r\n});\r\n\r\nexport default router"],"mappings":"AAAA,SAASA,gBAAgB,EAAEC,YAAY,QAAQ,YAAY;AAC3D,SAASC,OAAO,EAAEC,kBAAkB,QAAQ,eAAe;AAC3D,OAAOC,SAAS,MAAM,uBAAuB;AAC7C;AACA,OAAOC,YAAY,MAAM,0BAA0B;AACnD,OAAOC,SAAS,MAAM,uBAAuB;AAC7C;AACA;AACA;AACA;;AAGA,MAAMC,MAAM,GAAG,CACb;EACEC,IAAI,EAAE,QAAQ;EACdC,SAAS,EAAEL;AACb,CAAC;AACD;AACA;AACA;AACA;AACA;EACEI,IAAI,EAAE,WAAW;EACjBC,SAAS,EAAEJ;AACb,CAAC,EACD;EACEG,IAAI,EAAE,QAAQ;EACdC,SAAS,EAAEH;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA,CAGD;AAED,MAAMI,MAAM,GAAGT,YAAY,CAAC;EAC1BU,OAAO,EAAEX,gBAAgB,CAAC,CAAC;EAC3BO,MAAM,EAAEA;AACV,CAAC,CAAC;AAEF,MAAMK,cAAc,GAAGA,CAAA,KAAM;EAC3B,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;IACtC,MAAMC,cAAc,GAAGb,kBAAkB,CACvCD,OAAO,CAAC,CAAC,EACRe,IAAI,IAAK;MACRD,cAAc,CAAC,CAAC;MAChBF,OAAO,CAACG,IAAI,CAAC;IACf,CAAC,EACDF,MACF,CAAC;EACH,CAAC,CAAC;AACJ,CAAC;AAEDL,MAAM,CAACQ,UAAU,CAAC,OAAMC,EAAE,EAAEC,IAAI,EAAEC,IAAI,KAAI;EACxC,IAAIF,EAAE,CAACG,OAAO,CAACC,IAAI,CAAEC,MAAM,IAAKA,MAAM,CAACC,IAAI,CAACC,YAAY,CAAC,EAAE;IACzD,IAAI,MAAMd,cAAc,CAAC,CAAC,EAAE;MACzBS,IAAI,CAAC,CAAC;IACT,CAAC,MAAI;MACHM,KAAK,CAAC,uBAAuB,CAAC;MAC9BN,IAAI,CAAC,GAAG,CAAC;IACX;EACF,CAAC,MAAM;IACLA,IAAI,CAAC,CAAC;EACR;AACF,CAAC,CAAC;AAEF,eAAeX,MAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}